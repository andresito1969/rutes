"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["node_modules_esri_calcite-components_dist_calcite_p-2d01f997_js"],{

/***/ "./node_modules/@esri/calcite-components/dist/calcite/p-2d01f997.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/calcite/p-2d01f997.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   groupTimeZones: () => (/* binding */ G)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v2.8.5
 */
const t=(()=>{const t=Intl.supportedValuesOf("timeZone");const n=["Etc/GMT+1","Etc/GMT+10","Etc/GMT+11","Etc/GMT+12","Etc/GMT+2","Etc/GMT+3","Etc/GMT+4","Etc/GMT+5","Etc/GMT+6","Etc/GMT+7","Etc/GMT+8","Etc/GMT+9","Etc/GMT-1","Etc/GMT-10","Etc/GMT-11","Etc/GMT-12","Etc/GMT-13","Etc/GMT-14","Etc/GMT-2","Etc/GMT-3","Etc/GMT-4","Etc/GMT-5","Etc/GMT-6","Etc/GMT-7","Etc/GMT-8","Etc/GMT-9"];return[...new Set([...t,...n])]})();const n=new Date;const c=n.toISOString();const e=365;const o=e;const s={startDate:c,groupDateRange:o,debug:false};const r=new Set(["Europe","Asia","America","America/Argentina","Africa","Australia","Pacific","Atlantic","Antarctica","Arctic","Indian"]);const a=(t,n,c)=>{const e=[];let o=c.create(t);for(let t=0;t<=n;t++){o=c.increase(o);e.push(c.formatToIsoDateString(o))}return e};const i=t=>{if(t.includes("Istanbul")){return"Europe"}const n=t.lastIndexOf("/");return n===-1?t:t.slice(0,n)};const u=t=>r.has(t);const l=(t,n,c,e,o=false)=>{const s=new Map;if(o){console.log(`Initializing data starting ${n} with ${c} days in the future, comparing ${t.length} timezones`)}const r=a(n,c,e);return t.map((t=>{const n=t.label;const c=i(n);const o=r.map((t=>{const c=`${t}-${n}`;let o=s.get(c);if(o){return o}o=e.isoToTimeZone(t,n);s.set(c,o);return o}));return{...t,continent:c,isRegularContinent:u(c),dates:o}}))};const E=(t,n,c)=>t.length===n.length&&t.every(((t,e)=>c.same(t,n[e])));const M=(t,n=5)=>{const c=t.filter((({label:t})=>u(i(t))));if(c.length===0){return[0]}const e=c.map((n=>t.indexOf(n)));return T(e,n)};function T(t,n=5){const c=t.length;if(c<=n){return t}const e=Math.min(c-2,n-2);const o=(c-1)/(e+1);return[t[0],...Array.from({length:e},((n,c)=>t[Math.round((c+1)*o)])),t[c-1]]}async function G(n){const{debug:c,groupDateRange:e,hooks:o,startDate:r,dateEngine:a}={...s,...n};const i=[];if(!a){throw new Error("dateEngine is required")}const u=t.map((t=>({label:t})));o?.onBeforeTimeZoneMetadataCreate?.(u);const T=l(u,r,e,a,c);o?.onTimeZoneMetadataCreate?.(T);for(const t of T){const{label:n,continent:c,dates:e}=t;if(t.visited){continue}t.visited=true;const s={labelTzIndices:undefined,tzs:[{label:n}]};o?.onGroupCreate?.(s,t);for(const t of T.filter((t=>!t.visited))){const{label:n,continent:r,isRegularContinent:i,dates:u}=t;if((c===r||!i)&&E(e,u,a)){const c={label:n};s.tzs.push(c);o?.onGroupTimeZoneAdd?.(s,c,t);t.visited=true}}i.push(s);o?.onGroupAdd?.(s)}const G=i.map((t=>{o?.onBeforeFinalGroupCreate?.(t);t.tzs=t.tzs.sort(((t,n)=>t.label.localeCompare(n.label)));const n={labelTzIndices:M(t.tzs,7),tzs:t.tzs.map((t=>t.label))};o?.onFinalGroupCreate?.(n,t);return n})).sort(((t,n)=>n.tzs.length-t.tzs.length));if(c){const n=t.map((t=>G.some((n=>n.tzs.includes(t)))?null:t)).filter(Boolean);if(n.length>0){throw new Error(`There are ${n.length} missing timezones: ${n.toString()}`)}}return o?.onFinalGroupingCreate?o.onFinalGroupingCreate(G):G}
//# sourceMappingURL=p-2d01f997.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3Mvbm9kZV9tb2R1bGVzX2VzcmlfY2FsY2l0ZS1jb21wb25lbnRzX2Rpc3RfY2FsY2l0ZV9wLTJkMDFmOTk3X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYywyQ0FBMkMsMFVBQTBVLGdDQUFnQyxJQUFJLGlCQUFpQix3QkFBd0IsWUFBWSxVQUFVLFNBQVMsMENBQTBDLDBJQUEwSSxrQkFBa0IsV0FBVyxrQkFBa0IsWUFBWSxLQUFLLEtBQUssZ0JBQWdCLG1DQUFtQyxVQUFVLFlBQVksMkJBQTJCLGVBQWUsMkJBQTJCLDhCQUE4QixvQkFBb0IsNEJBQTRCLGdCQUFnQixNQUFNLDBDQUEwQyxHQUFHLE9BQU8sR0FBRyxnQ0FBZ0MsVUFBVSxZQUFZLGlCQUFpQixrQkFBa0IsZ0JBQWdCLGFBQWEsbUJBQW1CLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRSxlQUFlLE1BQU0sU0FBUyx1QkFBdUIsV0FBVyxTQUFTLEdBQUcsT0FBTyxrREFBa0QsSUFBSSx1RUFBdUUsa0JBQWtCLG9CQUFvQixRQUFRLGFBQWEsaUJBQWlCLFVBQVUsaUNBQWlDLGVBQWUsa0JBQWtCLGlCQUFpQixTQUFTLFNBQVMsMEJBQTBCLG9CQUFvQiwyQkFBMkIsU0FBUywwQ0FBMEMsb0JBQW9CLE1BQU0sMERBQTBELEVBQUUsV0FBVyxXQUFXLE9BQU8sMENBQTBDLG9CQUFvQixRQUFRLElBQUksdUNBQXVDLHFCQUFxQixpQ0FBaUMsa0JBQWtCLE1BQU0sNEJBQTRCLEdBQUcsY0FBYyxTQUFTLGVBQWUsU0FBUywrQkFBK0IsUUFBUSxHQUFHLHdCQUF3QiwwQ0FBMEMsTUFBTSxpREFBaUQsR0FBRywwQkFBMEIsU0FBUyxTQUFTLGNBQWMsK0JBQStCLGdCQUFnQixVQUFVLG1CQUFtQixtQkFBbUIsaUNBQWlDLDBEQUEwRCxTQUFTLHVEQUF1RCw2QkFBNkIsU0FBUyw0Q0FBNEMsTUFBTSwwRUFBMEUsZUFBZSw2QkFBNkIsVUFBVSxxQkFBcUIsYUFBYSxJQUFJLDZEQUF5RjtBQUN0MkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Blc3JpL2NhbGNpdGUtY29tcG9uZW50cy9kaXN0L2NhbGNpdGUvcC0yZDAxZjk5Ny5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjIuOC41XG4gKi9cbmNvbnN0IHQ9KCgpPT57Y29uc3QgdD1JbnRsLnN1cHBvcnRlZFZhbHVlc09mKFwidGltZVpvbmVcIik7Y29uc3Qgbj1bXCJFdGMvR01UKzFcIixcIkV0Yy9HTVQrMTBcIixcIkV0Yy9HTVQrMTFcIixcIkV0Yy9HTVQrMTJcIixcIkV0Yy9HTVQrMlwiLFwiRXRjL0dNVCszXCIsXCJFdGMvR01UKzRcIixcIkV0Yy9HTVQrNVwiLFwiRXRjL0dNVCs2XCIsXCJFdGMvR01UKzdcIixcIkV0Yy9HTVQrOFwiLFwiRXRjL0dNVCs5XCIsXCJFdGMvR01ULTFcIixcIkV0Yy9HTVQtMTBcIixcIkV0Yy9HTVQtMTFcIixcIkV0Yy9HTVQtMTJcIixcIkV0Yy9HTVQtMTNcIixcIkV0Yy9HTVQtMTRcIixcIkV0Yy9HTVQtMlwiLFwiRXRjL0dNVC0zXCIsXCJFdGMvR01ULTRcIixcIkV0Yy9HTVQtNVwiLFwiRXRjL0dNVC02XCIsXCJFdGMvR01ULTdcIixcIkV0Yy9HTVQtOFwiLFwiRXRjL0dNVC05XCJdO3JldHVyblsuLi5uZXcgU2V0KFsuLi50LC4uLm5dKV19KSgpO2NvbnN0IG49bmV3IERhdGU7Y29uc3QgYz1uLnRvSVNPU3RyaW5nKCk7Y29uc3QgZT0zNjU7Y29uc3Qgbz1lO2NvbnN0IHM9e3N0YXJ0RGF0ZTpjLGdyb3VwRGF0ZVJhbmdlOm8sZGVidWc6ZmFsc2V9O2NvbnN0IHI9bmV3IFNldChbXCJFdXJvcGVcIixcIkFzaWFcIixcIkFtZXJpY2FcIixcIkFtZXJpY2EvQXJnZW50aW5hXCIsXCJBZnJpY2FcIixcIkF1c3RyYWxpYVwiLFwiUGFjaWZpY1wiLFwiQXRsYW50aWNcIixcIkFudGFyY3RpY2FcIixcIkFyY3RpY1wiLFwiSW5kaWFuXCJdKTtjb25zdCBhPSh0LG4sYyk9Pntjb25zdCBlPVtdO2xldCBvPWMuY3JlYXRlKHQpO2ZvcihsZXQgdD0wO3Q8PW47dCsrKXtvPWMuaW5jcmVhc2Uobyk7ZS5wdXNoKGMuZm9ybWF0VG9Jc29EYXRlU3RyaW5nKG8pKX1yZXR1cm4gZX07Y29uc3QgaT10PT57aWYodC5pbmNsdWRlcyhcIklzdGFuYnVsXCIpKXtyZXR1cm5cIkV1cm9wZVwifWNvbnN0IG49dC5sYXN0SW5kZXhPZihcIi9cIik7cmV0dXJuIG49PT0tMT90OnQuc2xpY2UoMCxuKX07Y29uc3QgdT10PT5yLmhhcyh0KTtjb25zdCBsPSh0LG4sYyxlLG89ZmFsc2UpPT57Y29uc3Qgcz1uZXcgTWFwO2lmKG8pe2NvbnNvbGUubG9nKGBJbml0aWFsaXppbmcgZGF0YSBzdGFydGluZyAke259IHdpdGggJHtjfSBkYXlzIGluIHRoZSBmdXR1cmUsIGNvbXBhcmluZyAke3QubGVuZ3RofSB0aW1lem9uZXNgKX1jb25zdCByPWEobixjLGUpO3JldHVybiB0Lm1hcCgodD0+e2NvbnN0IG49dC5sYWJlbDtjb25zdCBjPWkobik7Y29uc3Qgbz1yLm1hcCgodD0+e2NvbnN0IGM9YCR7dH0tJHtufWA7bGV0IG89cy5nZXQoYyk7aWYobyl7cmV0dXJuIG99bz1lLmlzb1RvVGltZVpvbmUodCxuKTtzLnNldChjLG8pO3JldHVybiBvfSkpO3JldHVybnsuLi50LGNvbnRpbmVudDpjLGlzUmVndWxhckNvbnRpbmVudDp1KGMpLGRhdGVzOm99fSkpfTtjb25zdCBFPSh0LG4sYyk9PnQubGVuZ3RoPT09bi5sZW5ndGgmJnQuZXZlcnkoKCh0LGUpPT5jLnNhbWUodCxuW2VdKSkpO2NvbnN0IE09KHQsbj01KT0+e2NvbnN0IGM9dC5maWx0ZXIoKCh7bGFiZWw6dH0pPT51KGkodCkpKSk7aWYoYy5sZW5ndGg9PT0wKXtyZXR1cm5bMF19Y29uc3QgZT1jLm1hcCgobj0+dC5pbmRleE9mKG4pKSk7cmV0dXJuIFQoZSxuKX07ZnVuY3Rpb24gVCh0LG49NSl7Y29uc3QgYz10Lmxlbmd0aDtpZihjPD1uKXtyZXR1cm4gdH1jb25zdCBlPU1hdGgubWluKGMtMixuLTIpO2NvbnN0IG89KGMtMSkvKGUrMSk7cmV0dXJuW3RbMF0sLi4uQXJyYXkuZnJvbSh7bGVuZ3RoOmV9LCgobixjKT0+dFtNYXRoLnJvdW5kKChjKzEpKm8pXSkpLHRbYy0xXV19YXN5bmMgZnVuY3Rpb24gRyhuKXtjb25zdHtkZWJ1ZzpjLGdyb3VwRGF0ZVJhbmdlOmUsaG9va3M6byxzdGFydERhdGU6cixkYXRlRW5naW5lOmF9PXsuLi5zLC4uLm59O2NvbnN0IGk9W107aWYoIWEpe3Rocm93IG5ldyBFcnJvcihcImRhdGVFbmdpbmUgaXMgcmVxdWlyZWRcIil9Y29uc3QgdT10Lm1hcCgodD0+KHtsYWJlbDp0fSkpKTtvPy5vbkJlZm9yZVRpbWVab25lTWV0YWRhdGFDcmVhdGU/Lih1KTtjb25zdCBUPWwodSxyLGUsYSxjKTtvPy5vblRpbWVab25lTWV0YWRhdGFDcmVhdGU/LihUKTtmb3IoY29uc3QgdCBvZiBUKXtjb25zdHtsYWJlbDpuLGNvbnRpbmVudDpjLGRhdGVzOmV9PXQ7aWYodC52aXNpdGVkKXtjb250aW51ZX10LnZpc2l0ZWQ9dHJ1ZTtjb25zdCBzPXtsYWJlbFR6SW5kaWNlczp1bmRlZmluZWQsdHpzOlt7bGFiZWw6bn1dfTtvPy5vbkdyb3VwQ3JlYXRlPy4ocyx0KTtmb3IoY29uc3QgdCBvZiBULmZpbHRlcigodD0+IXQudmlzaXRlZCkpKXtjb25zdHtsYWJlbDpuLGNvbnRpbmVudDpyLGlzUmVndWxhckNvbnRpbmVudDppLGRhdGVzOnV9PXQ7aWYoKGM9PT1yfHwhaSkmJkUoZSx1LGEpKXtjb25zdCBjPXtsYWJlbDpufTtzLnR6cy5wdXNoKGMpO28/Lm9uR3JvdXBUaW1lWm9uZUFkZD8uKHMsYyx0KTt0LnZpc2l0ZWQ9dHJ1ZX19aS5wdXNoKHMpO28/Lm9uR3JvdXBBZGQ/LihzKX1jb25zdCBHPWkubWFwKCh0PT57bz8ub25CZWZvcmVGaW5hbEdyb3VwQ3JlYXRlPy4odCk7dC50enM9dC50enMuc29ydCgoKHQsbik9PnQubGFiZWwubG9jYWxlQ29tcGFyZShuLmxhYmVsKSkpO2NvbnN0IG49e2xhYmVsVHpJbmRpY2VzOk0odC50enMsNyksdHpzOnQudHpzLm1hcCgodD0+dC5sYWJlbCkpfTtvPy5vbkZpbmFsR3JvdXBDcmVhdGU/LihuLHQpO3JldHVybiBufSkpLnNvcnQoKCh0LG4pPT5uLnR6cy5sZW5ndGgtdC50enMubGVuZ3RoKSk7aWYoYyl7Y29uc3Qgbj10Lm1hcCgodD0+Ry5zb21lKChuPT5uLnR6cy5pbmNsdWRlcyh0KSkpP251bGw6dCkpLmZpbHRlcihCb29sZWFuKTtpZihuLmxlbmd0aD4wKXt0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGFyZSAke24ubGVuZ3RofSBtaXNzaW5nIHRpbWV6b25lczogJHtuLnRvU3RyaW5nKCl9YCl9fXJldHVybiBvPy5vbkZpbmFsR3JvdXBpbmdDcmVhdGU/by5vbkZpbmFsR3JvdXBpbmdDcmVhdGUoRyk6R31leHBvcnR7RyBhcyBncm91cFRpbWVab25lc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wLTJkMDFmOTk3LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==